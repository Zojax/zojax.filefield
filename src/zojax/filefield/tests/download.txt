=============
Download File
=============

  >>> import transaction
  >>> from zojax.filefield.data import File
  >>> from zope.publisher.browser import TestRequest
  >>> from zope.testbrowser.testing import Browser

  >>> browser = Browser()
  >>> browser.addHeader("Authorization", "Basic mgr:mgrpw")
  >>> browser.handleErrors = False

  >>> f = File()
  >>> getRootFolder()['file'] = f
  >>> transaction.commit()

Headers
-------

By default is used filename attribute for content disposition
filename, and inline.

  >>> request = TestRequest()
  >>> results = f.show(request)
  >>> sorted(request.response.getHeaders()[-3:])
  [('Content-Disposition', 'inline; filename="file"'),
   ('Content-Length', '0'),
   ('Content-Type', 'text/plain')]

Note that a default content type of 'application/octet-stream' is
used.

If the file object specifies a content type, that's used in the headers
by default. Same for filename.

  >>> f.filename = 'test.txt'
  >>> f.mimeType = 'text/plain'
  >>> results = f.show(request)
  >>> sorted(request.response.getHeaders()[-3:])
  [('Content-Disposition', 'inline; filename="test.txt"'),
   ('Content-Length', '0'),
   ('Content-Type', 'text/plain')]

We can override filename and content disposition

  >>> results = f.show(request, 'document.txt', 'attachment')
  >>> sorted(request.response.getHeaders()[-3:])
  [('Content-Disposition', 'attachment; filename="document.txt"'),
   ('Content-Length', '0'),
   ('Content-Type', 'text/plain')]


Body
----

We use DownloadResult to deliver the content to the browser.  Since
there's no data in this file, there are no body chunks:

  >>> transaction.commit()
  >>> from zojax.filefield.data import DownloadResult
  >>> result = DownloadResult(f)
  >>> list(result)
  []

We still need to see how non-empty files are handled.  Let's write
some data to our file object:

  >>> w = f.open("w")
  >>> w.write("some text")
  >>> w.flush()
  >>> w.close()
  >>> transaction.commit()

Now we can create a result object and see if we get the data we
expect:

  >>> result = DownloadResult(f)
  >>> L = list(result)
  >>> "".join(L)
  'some text'

If the body content is really large, the iterator may provide more
than one chunk of data:

  >>> w = f.open("w")
  >>> w.write("*" * 1024 * 1024)
  >>> w.flush()
  >>> w.close()
  >>> transaction.commit()

  >>> result = DownloadResult(f)
  >>> L = list(result)
  >>> len(L) > 1
  True

Once iteration over the body has completed, further iteration will not
yield additional data:

  >>> list(result)
  []


The Download View
-----------------

Now that we've seen the ``getHeaders`` function and the result object,
let's take a look at the basic download view that uses them.  We'll need
to add a file object where we can get to it using a browser:

  >>> f = File()
  >>> f.mimeType = "text/plain"
  >>> f.filename = 'abcdefg'
  >>> w = f.open("w")
  >>> w.write("some text")
  >>> w.close()
  >>> transaction.commit()

  >>> getRootFolder()["abcdefg"] = f

  >>> transaction.commit()

Now, let's request the download view of the file object and check the
result:

  >>> print http("""
  ... GET /abcdefg/@@index.html HTTP/1.1
  ... Authorization: Basic mgr:mgrpw
  ... """, handle_errors=False)
  HTTP/1.1 200 Ok
  Content-Disposition: inline; filename="abcdefg"
  Content-Length: 9
  Content-Type: text/plain
  Last-Modified: ...
  <BLANKLINE>
  some text


The Preview View
-----------------

ODT

  >>> from zojax.filefield import tests
  >>> import os.path
  >>> f = File()
  >>> f.mimeType = "application/vnd.oasis.opendocument.text"
  >>> f.filename = 'abcdefg'
  >>> w = f.open("w")
  >>> w.write(open(os.path.join(os.path.dirname(tests.__file__), "test.odt")).read())
  >>> w.close()
  >>> transaction.commit()

  >>> getRootFolder()["previewed-odt"] = f

  >>> transaction.commit()

Now, let's request the download view of the file object and check the
result:

  >>> print http("""
  ... GET /previewed-odt/@@preview HTTP/1.1
  ... Authorization: Basic mgr:mgrpw
  ... """, handle_errors=False)
  HTTP/1.1 200 Ok
  Content-Disposition: inline; filename="abcdefg"
  Content-Length: 746
  Content-Type: application/x-shockwave-flash
  Last-Modified: ...
  <BLANKLINE>
  CWS ...

  >>> browser.open("http://localhost/previewed-odt/@@preview.html")
  >>> print browser.contents
  <html>
  <head>
  <script type="text/javascript" src=".../jquery.js"></script>
  <script type="text/javascript" src=".../jquery-plugins.js"></script>
  ...
  </head>
     <body>
      <div id="z-portal-workspace"><div id="z-portal-viewspace"><div id="z-content"><script type="text/javascript">
      if(window.addEventListener)
      window.addEventListener('DOMMouseScroll', handleWheel, false);
      window.onmousewheel = document.onmousewheel = handleWheel;
      if (window.attachEvent)
      window.attachEvent("onmousewheel", handleWheel);
      function handleWheel(event){
          try{
              if(!window.document.FlexPaperViewer.hasFocus()){return true;}
              window.document.FlexPaperViewer.setViewerFocus(true);
              window.document.FlexPaperViewer.focus();
              if(navigator.appName == "Netscape"){
                  if (event.detail)
                      delta = 0;
                  if (event.preventDefault){
                      event.preventDefault();
                      event.returnValue = false;
                      }
              }
              return false;
          }catch(err){return true;}
      }
  </script><script type="text/javascript"> var preview_url='preview'; viewer_url='http://localhost/@@/filefield/FlexPaperViewer.swf'</script><script type="text/javascript">
      <!-- For version detection, set to min. required Flash Player version, or 0 (or 0.0.0), for no version detection. -->
      var swfVersionStr = "9.0.124";
      <!-- To use express install, set to playerProductInstall.swf, otherwise the empty string. -->
      var xiSwfUrlStr = "${expressInstallSwf}";
      var flashvars = {
            SwfFile : escape(preview_url),
            Scale : 0.6,
            ZoomTransition : "easeOut",
            ZoomTime : 0.5,
            ZoomInterval : 0.1,
            FitPageOnLoad : false,
            FitWidthOnLoad : true,
            PrintEnabled : true,
            FullScreenAsMaxWindow : true,
            ProgressiveLoading : true,
            localeChain: "en_US"
            };
       var params = {
  <BLANKLINE>
          }
      params.quality = "high";
      params.bgcolor = "#ffffff";
      params.allowfullscreen = "true";
      var attributes = {};
      attributes.id = "FlexPaperViewer";
      attributes.name = "FlexPaperViewer";
      swfobject.embedSWF(
          viewer_url, "flashContent",
          "600", "500",
          swfVersionStr, xiSwfUrlStr,
          flashvars, params, attributes);
      swfobject.createCSS("#flashContent", "display:block;text-align:left;");
  </script><div id="flashContent">
      <p>
          To view this page ensure that Adobe Flash Player version
          9.0.124 or greater is installed.
      </p>
    <script type="text/javascript">
            var pageHost = ((document.location.protocol == "https:") ? "https://" : "http://");
            document.write("<a href="http://www.adobe.com/go/getflashplayer"><img src="\"                           + pageHost + \"www.adobe.com/images/shared/download_buttons/get_flash_player.gif" alt="Get Adobe Flash player" /></a>" );
        </script>
  </div></div></div></div>
  </body>
  </html>
